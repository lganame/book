第一章
网站架构及其演变过程
1.1软件的三大类型
	软件的三大类型：单机类型、CS类型和BS类型。
1.2基础的结构并不简单
	一种是标准的OSI参考模型，另一种是TCP/IP参考模型
	APSTNP	ATNN
	数据传输的本质就是按照晶振震动周期或者其整数倍来传输代表0/1的高低电平，传输过程中最核心的就是各种传输协议。
1.3架构演变的起点
1.4海量数据的解决方案
1.4.1缓存和页面静态化
	数据量大这个问题最直接的解决方案就是使用缓存，缓存就是将从数据加中获取的结果暂时保存起来，在下次使用的时候无需重新到数据库中获取，这样可以大大降低数据的压力。
	缓存的使用方式可以分为通过程序直接保存到内存中和使用缓存框架两种式。程序直接操作主要是使用Map，尤其是ConcurrentHashMap，而常用的缓存框架有Ehcache、Memcache和Redis等。缓存使用过程中最重要的问题是什么时候创建缓存和缓存的失效机制。缓存可以在第一次获取的时候创建也可以在程序启动和缓存失效之后立即创建，缓存的失效可以定期失效，也可以在数据发生变化的时候失效，如果按数据发生变化让缓存失效，还可以分为粗粒度失效和细粒度失效。
	缓存不是什么情况都适用，它主要用于数据变化不是很频繁的情况。
	跟缓存相似的另外一种技术叫页面静态化。页面静态化是将程序最后生成的页面保存起来，使用页面静态化后就不需要每次调用都重新生成页面。
	页面静态化可以在程序中使用模板技术生成。
1.4.2数据库优化
	要解决数据量大的问题，是避不开数据库优化的。数据库优化可以在不增加硬件的情况下提高处理效率，这是一种用技术换金钱的方式。数据库优化的方法非常多，常用的有表结构优化、SQL语句优化、分区和分表、索引优化、使用存储过程代替直接操作等，另外有时候合理使用冗余也能获得非常好的效果。
表结构优化
	表结构优化是数据库中最基础也是最重要的，如果表结构优化得不合理，就可能导致严重的性能问题，具体怎么设计更合理也没有固定不变的准则，需要根据实际情况具体处理。
SQL语句优化
	SQL语句优化也是非常重要。基础的SQL优化是语法层面的优化，不过更重要的是处理逻辑的优化，这也需要根据实际情况具体处理，而且要和索引缓存等配合使用。不过SQL优化有一个通用的做法就是，首先要将涉及大数据的业务的SQL语句执行时间详细记录下来，其次通过仔细分析日志（同一条语句对不同条件的执行时间也可能不同，这点也需要仔细分析）找出需要优化的语句和其中的问题，然后再有的放矢地优化，而不是不分重点对每条语句都花同样的时间和精力优化。
分区
	当数据量变多的时候，如果可以分区或者分表，那将赶到非常好的效果。当一张表的数据量变多的时候操作速度就慢了，所以很容量想到的就是将数据分到多个表中保存，但是这么做之后操作起来 比较麻烦，想操作（增删改查）一个数据还需要先找到对应的表，如果涉及多个表还得跨表操作。其实在常用的数据库中可以不分表而达到跟分表类似的效果，那就是分区。分区就是将一张表中的数据按照一定的规则分到不同的区来保存、这样在查询数据时如果数据的范围在同一个区内那么可以只对一个区的数据进行操作，这样操作的数据量更少，速度更快，而且这种方法对程序是透明的，程序不需要做任何发动。
分表
	如果一张表中的数据可以分为几种固定不变的类型，而且如果同时对多种类型共同操作的情况不多，那么都可以通过分表来处理，这也需要具体情况具体对待。
	另外一种分表的方法是将一个表中不同类型的字段分到时不同的表中保存，这么做最直接的好处就是增删改数据的时候锁定的范围减少了，没被锁定的表中的数据不受影响。如果一个表的操作频率很高，在增删改其中一部分字段数据的同时另一部分字段也可能被操作，而且（主要指查询）用不到被增删改的字段，那么就可以把不同类型的字段分别保存到不同的表中，这样可以减少操作时锁定数据的范围。不过这样分表之后，如果需要查询完整的数据就得使用多表操作了。

索引优化
	索引的大致原理是在数据发生变化（增删改）的时候就预先按指定字段的顺序排列后保存到一个类似表的结构中，这样在查找索引字段为条件的记录时就可以很快地从索引中找到对应记录的指针并从表中获取到记录，这样的速度就快多了。不过索引也是一把双刃剑 ，它在提高查询速度的同时也降低了增删改的速度，因为每次数据的变化都需要更新相应的索引。不过合理使用索引对提升查询速度的效果明显，所以对哪些字段使用索引、使用什么类型的索引都需要仔细琢磨，并且最好再做一些测试

使用存储过程代替直接操作。
	在操作过程复杂而且调用频率高的业务中，可以通过使用存储过程代替直接操作来提高效率，因为存储过程只需要编译一次，而且可以在一个存储过程里面做一些复杂的操作。


1.4.3分离活跃数据
	虽然有些数据总数据量非常大，但是活跃数据并不多，这种情况就可以将活跃数据单独保存起来从而提高处理效率。

1.4.4批量读取和延迟修改
	批量读取和延迟修改的原理是通过减少操作的次数来提高效率，如果使用得恰当，效率将会呈数量级提升。
	批量读取是将多次查询合并到一次运行。
	延迟修改主要针对高并发而且频繁修改（包括新增）的数据，如一些统计数据。这种情况可以先将需要修改的数据暂时保存到缓存中，然后定时将缓存中的数据保存到数据库中，程序在读取数据时可以同时读取数据库中的和缓存中的数据。

1.4.5
	读写分离的本质是对数据库进行集群，这样就可以在高并发的情况下将数据库的操作分配到多个数据库服务器去处理从而降低单台服务器的压力，不过由于数据库的特殊性——每台服务器所保存的数据都需要一致，所以数据同步就成了数据库集群中最核心的问题。如果多台服务器都可以写数据那么数据同步将变得非常复杂，所以一般情况下是将写操作交给专门的一台服务器处理，这台专门负责写的服务器叫做主服务器。当主服务器写入数据后从底层同步到别的服务器，读数据的时候到从服务器读取。
	简单的数据同步方式可以采用数据库的热备份功能，不过读取到的数据可能会存在一定的滞后性，高级的方式需要专门的软硬件配合。另外既然是集群就涉及负载均衡问题，负载均衡和读写分享的操作一般采用专门程序处理，而且对应用系统来说是透明的。
1.4.6
	分布式数据库是将不同的表存放到不同的数据库中然后再放到不同的服务器。这样在处理请求时，如果需要调用多个表，则可以让多台服务器同时处理，从而提高处理速度。
	数据库集群（读写分离）的作用是将多个请求分配到不同的服务器处理，从而减轻单台服务器的压力，而分布式数据库是解决单个请求本身就非常复杂的问题，它可以将单个请求分配到多个服务器处理，使用分布式后的每个节点还可以同时使用读写分享，从而组成多个节点群。
	分布式的另外一种使用的思路是将不同业务的数据表保存到不同的节点 ，让不同的业务调用不同的数据库，这种用法其实是和集群一起起分流的作用。


1.4.7 NoSQL和Hadoop
      NoSQL是近年来发展非常迅速的一项技术，它的核心就是非结构化。我们一般使用的数据库(SQL数据库)都是需要先将表的结构定义出来，一个表有几个字段，每个字段各是什么类型，然后才能往里面按照相应的类型保存数据，而且按照数据库范式的规定，一个字段只能保存单一的信息，不可以包括多层内容，这就对使用的灵活性带来了很大的制约，NoSQL就是突破了这些条条框框，可以非常灵活地进行操作，另外因为NoSQL通过多个块存储数据的特点，其操作大数据的速度也非常快，这些特性正是现在的互联网程序最需要的，所以NoSQL发展得非常快。现在NoSQL主要使用在互联网的程序中，在企业业务系统中使用的还不多，而且现在NoSQL还不是很成熟，但由于灵活和高效的特性，NoSQL发展的前景是非常好的。
      Hadoop是专门针对 大数据处理的一套框架，随着近年来大数据的流行Hadoop也水涨般高。Hadoop对数据的存储和处理都提供了相应的解决方案，底层数据的存储思路类似于分布式加集群的方案，不过Hadoop是将同一个表中的数据分成多块保存到多个节点（分布式），而且每一块数据都有多个节点保存（集群），这里集群除了可以并行处理相同的数据，还可以保证数据的稳定性，在其中一个节点出现问题后数据不会丢失。这里的每个节点都不包含一个完整的表的数据，但是一个节点可以保存多个表的数据。
      Hadoop对数据的处理是先对每一块的数据找到相应的节点并进行处理，然后再对每一个处理的结果进行处理，最后生成最终的结果。

1.5高并发的解决方案
	除了数据量大，另一个常见的问题就是并发量高，很多架构就是针对这个问题设计出来的。
1.5.1应用和静态资源分离
1.5.2页面缓存
	页面缓存是将应用生成的页面缓存起来，这样就不需要每次都重新生成页面了，从而可以节省大量CPU资源，如果将缓存的页面放到内存中速度就更快了。
1.5.3集群与分布式
	集群和分布式处理都是使用多台服务器进行处理的，集群是每台服务器具有相同的功能，处理请求时调用哪台服务器都可以，主要起分流的作用，分布式是将不同的业务放到不同的服务器中，处理一个请求可能需要用到多台服务器，这样就可以提高请求的处理速度，而且集群和分布式也可以同时使用。
	集群有两个方式：一种是静态资源集群。另一种是应用程序集群。静态资源集群比较简单，而应用程序集群就有点复杂了。因为应用程序在处理过程中可能会使用到一些缓存的数据，如果集群就需要同步这些数据，其中最重要的就是Session，Session同步也是应用程序集群中非常核心的一个问题。Session同步有两种处理方式：一种是在Session发生变化后自动同步到其他服务器，另外一种方式是用一个程序统一管理session。所有集群的服务器都使用一个session，Tomcat默认使用的就是第一种方式，通过简单的配置就可以实现，第二种方式可以使用专门的服务器安装Meecached等高效的缓存程序来统一管理Session，然后在应用程序中通过重写Request并覆盖getSesion方法来获取指定服务器中的Session。对于集群来说还有一个核心的问题就是负载均衡，也就是接收到一个请求后具体分配到哪个服务器去处理的问题，这个问题可以通过软件处理也可以使用专门的硬件模块 。
	Session需要同步的本质原因就是要使用不同的服务器给同一个用户提供服务，如果负载均衡在分配请求时可以将同一个用户分配到同一台服务器进行处理也就不需要Session同步了，而且这种方法一般也不会对负载均衡带来太大的问题，如果考虑到稳定性，为了防止有机器宕机后丢失数据还可以将集群的服务器分成多个组，然后在小范围的组内同步Session.

1.5.4
	反向代理
	反向代理指的是客户端直接访问的服务器并不真正提供服务，它从别的服务器获取资源然后将结果返回给用户的。
	反向代理服务器可以和实际处理请求的服务器在同一台主机上，而且一台反射代理服务器也可以访问多台实际处理请求的服务器。反向代理服务器主要有三个作用：1可以作为前端服务器跟实际处理请求的Tomcat集成。2可以用做负载均衡；3转发请求。

1.5.5	CDN
	CDN其实是一种特殊的集群页面缓存服务器，它和普通集群的多台页面缓存服务器比主要是它存放的位置和分配请求的方式有点特殊。CDN的服务器是分布在全国各地的，当接收到用户的请求后会将请求分配到最合适的CDN服务器节点获取数据。
	CDN的每个节点就是一个页面缓存服务器，如果没有请求资源的缓存就会从主服务器获取，否则直接返回缓存的页面。CDN分配请求的方式比较特殊，它并不是使用普通的负载均衡服务器来分配的，而是用专门的CDN域名解析到一个特定的域名，然后再将解析到的那个域名用专门的CDN服务器解析到相应的CDN节点。
	第二步访问CDN的DNS服务器是因为CNAME记录的目标域名使用NS记录指向了CDN的DNS服务器。CDN的每个节点可能也是集群了多台服务器。CDN的原理并不复杂，不过如果要自己去架设则需要投入大量的资金，现在有专门的CDN服务商，可以直接购买它们的服务。

1.6底层的优化
	所有架构老师建立在最前面介绍的基础架构之上的，而且很多地方都需要通过网络传输数据，如果可以加快网络传输的速度，那将会让整个系统从根本上得到改善。网络传输数据都是按照各种协议时行的，不过协议并不是不可以改变。

第二章 常见协议和标准
2.1DNS协议
2.2TCP/IP协议与Socket
	TCP在传输之前会进行三次沟通，一般称为三次握手，传完数据断开的时候要进行四次沟通，一般称为四次挥手，要理解这个过程首先需要理解TCP中的两个序号和三个标志位的含义
	seq:sequence number的综写，表示所传数据的序号。TCP传输时每一个字节都有一个序号，发送数据时会将数据的第一个序号发送给对方，接收方会按序号检查是否接收完整了，如果没接收完整就需要重新传送，这样就可以保证数据的完整性。
	ack:acknoledgement number的缩写，表示确认号。接收端用它来给发送端反馈已经成功接收到的数据信息的，它的值为希望接收下一个数据包起始序号，也就是ack值所代表的序号前面数据已经成功接收到了。
	ACK:确认位，只有ACK=1的时候ack才起作用。正常通信时ACK为1，第一次发起请求时因为没有需要确认接收的数据所以ACK为0
	SYN:同步位，用于在建立连接时同步序号。刚开始建立连接时并没有历史接收的数据，所以ack也就没办法设置，这时按照正常的机制就无法运行了，SYN的作用就是来解决这个问题的，当接收到 SYN=1的报文时就会直接将ack设置为接收到的seq+1的值，注意这里的值并不是校验后设置的，而是根据SYN直接设置的，这样正常的机制就可以运行了，所以SYN叫同步位。需要注意的是,SYN会在前两次握手时都为1，这是因为通信的双方的ack都需要设置一个初始值。
	FIN:终止位，用来在数据传输完毕后释放连接。
	上部为三次扬，下部为四次挥手，这里的四次插手中画的是客户端提出的终止连接，在实际传输过程中也有可能是服务端提出终止连接，它们的处理过程都是一样的。TCP的传输是双全式模式，也就是说传输的双方是对等的，可以同时传输数据，所以无论连接还是关闭都需要对双方同时进行。三次握手中前毅两次可以保证服务端可以正确接收并返回请求，后两次可以保证客户端可以正确接收并返回请求，而且在三次扬的过程中还使用SYN标志初始化了双方的ack值。四次挥手就是双方分别发送FIN标志来关闭连接并让对方确认。
	三次握手和四次挥手保证了连接的可靠性，不过凡事有利就有弊，这种模式也有它的缺点，首先是在传输效率上会比较低，另外三次握手的过程中客户端需要发送再次数据才可以建立连接，这种特性可能被一些别有用心的人利用。
	用于传输层的协议除了TCP还有UDP,它们的区别主要是TCP是有连接的，UDP是没有连接的，也就是说TCP协议是在沟通好后才会传数据，而UDP协议是拿到地址后直就传了，这样产生的结果就是TCP协议传输的数据更可靠，而UDP传输的速度更快。TCP就低胸是打电话，需要先所能对方号码才能通信，而UDP就像是使用对讲机，拿起来就可以直接讲话。通常视频传输、主意传输等对完整性要求不高而对传输速度要求高并且数据量在的通信使用UDP比较多，而邮件、网页等一般使用TCP协议。
	HTTP协议的底层传输默认使用的是可靠的TCP协议，不过它对互联网的高速发展带来了很大的制约，Google制定了一套基于UDP的QUIC(Quick UDP Internet Connection)协议，这种协议基于TCP和UDP之间，不过现在还没有广泛使用。
	TCP/IP协议只是一套规则 ，并不能上体工作，就像是程序中的接口一样，而Socket是TCP/IP协议的一个具体的实现。


2.3HTTP协议
	Http协议是应用层的协议，在TCP/IP协议接收到数据之后需要通过HTTP协议来 解析才能使用，就像过去的发电报一样，电报机就相当于Socket，负责选好发送的目标并将内容发过去，但是直接发过去的数据“嘀嘀嘀”并不能直接使用，还需要解码（在改善前需要先编码再改善）后才能用，电报中的编码和解码就相当于网络传输中的HTTP协议。
	HTTP协议中的报文结构非常重要。HTTP中的报文结构非常重要。HTTP中报文分为请求报文(Request message)和响应报文(response message)两种类型，这两种类型都包括三部分:首行、头部和主体。请求报文的首行是请求行，包括方法（请求类型）、URL和HTTP版本三项内容 ，响应请求的首行是状态行，包括HTTP版本、状态码和简短原因三项内容 ，其中原因可有可无。头部保存一些键值对的属性，用冒号：侵害。主体保存具体内容，请求报文中主要保存POST类型的参数，响应报文中保存页面要显示的结果。首行、头部以及头部的各项内容用回车换行(\r\n)分割。另外头部和主体之间多一个空行，也就是有两个连续的回车换行。
	请求报文中的方法指GET、HEAD、POST、PUT、DELETE等类型，响应报文 中的状态友情就是Response中的status，一共分为5类。
	1XX:信息性状态码
	2XX:成功状态码
	3XX:重定向状态码
	4XX:客户端错误状态码
	5XX:服务器端错误状态码
	报文 信息可以通过firefox的firebug插件来查看。firebug面板->网络->HTML->网站发送请求。
2.4Servlet与JavaWeb开发
	Servlet是J2EE标准的一部分，是Java Web开发的标准

第三章 DNS的设置
       3.1DNS解析
       记录类型:域名解析有很多种解析的类型，如常用的A记录和CNAME记录。A记录是将域名解析到IP(一个域名可以有多条A记录),CNAME记录是将域名解析到另一个域名（也就是作为另一个域名的别名），查找时会返回目标域名所对应的IP。
       1.www.excelib.com可能会有多条解析记录，而excelib.com用一条CNAME记录就可以完成了；
       2.在www.excelib.com的ip发生变化时，excelib.com不需要修改解析内容直接就可以自动改变。
       3.使用CDN时可以将用户直接访问的域名作为一个别名，然后将指向的域 名通过ns记录指定CDN服务器但是可以获取到CDN的DNS服务器解析的结果。
       主机记录：就是域名前面的部分，如www.bbs等等,如果要解析顶级域名，也就是域名前面没有内容则使用@代替。
       解析线路：这是万网新增加的内容，很多别的运营商现在还没有这项功能，通过这一选项可以将不同线路的用户解析到不同的服务器。
       记录值：解析的目标值，如A记录就是IP、CNAME记录就是对应的目标域名
       TTL:本地DNS服务器缓存解析结果的时间。
3.2WINDOWS7ymlfDNSebtlkkd
	控制面板->所使用的连接->TCP/IPv4
3.3Windows设置本机域名和ip的对应关系。
	C:\windows\system32\drivers\etc\hosts->+空格+域名"

第四章Java中Socket的用法
4.1普通Socket的用法
	Java中的网络通信是通过Socket实现的，Socket分为ServerSocket和Socket两大类，ServerSocket用于服务端，可以通过accpet方法监听请求，监听到请求后返回Socket，Socket用于具体完成数据传输，客户端直接使用Socket发起请求并传输数据。
	ServerSocket的使用可以分为三步：
	1)创建ServerSocket。ServerSocket的构造方法一共有5个，用起来最方便的是ServerSocket(int port)，只需要一个port(端口号)就可以了
	2)调用创建出来的ServerSocket的accpet方法进行监听。accept方法是阻塞方法，也就是说调用accept方法后程序会停下来等等连接请求，在接收到请求之前程序将不会往下走，当接收到请求后accpet方法会返回一个Socket
	3)使用accpet方法返回的socket与客户端进行通信.

	server.java
	import java.io.*;
import java.new.ServerSocket;
import java.net.Socket;
public class Server{
    public static void main(String args[]){
	try{
	    //创建一个SeverSocket监听8080端口
	    ServerSocket server = new ServerSocket(8080);
	    //等待请求
	    Socket socket = server.accept();
	    //接收到请求后使用socket进行通信，创建BufferedReader用于读取数据
	    BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    String line = is.readLine();
	    System.out.println("received from client:"+line);
	    //创建PrintWriter,用于发送数据
	    PrintWriter pw = new PrintWriter(socket.getOutputStream());
	    pw.println("received data:"+line);
	    pw.flush();
	    //关闭资源
	    pw.close();
	    is.close();
	    socket.close();
	    server.close();
	}catch(Exception e){
	    e.printStackTrace();
	}
    }
}
在上面的Server里面，首先创建了ServerSocket，然后调用accept等待请求，当接收到请求后，用返回的Socket创建Reader和Writer来接收和发送数据，Reader接收到数据后保存到line，然后打印到控制台。再将数据发送到client，告诉client接收到的是什么数据，功能非常简单。
然后再来看客户端Socket的用法。Socket的使用也是一样，首先创建Socket，Socket的构造方法非常多，这里用的是Socket(String host, int port)，把目标主机的地址和端口号传入即可，Socket创建的过程就会跟服务器建立连接，创建完Socket后，再用其创建Writer和Reader来传输数据，数据传输完成后关闭连接即可。
														    Client.java
														    import java.io.*;
import java.net.Socket;
public class Client{
    public static void main(String args[]){
	String msg = "Client Data";
	try{
	    //创建一个Socket，跟本机的8080端口连接
	    Socket Socket = new Socket("127.0.0.1",8080);
	    //使用Socket创建PrintWriter和BufferedReader进行读写数据
	    PrintWriter pw = new PrintWriter(socket.getOutputStream());
	    BufferedReader is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    //发送数据
	    pw.println(msg);
	    pw.flush();
	    //接收数据
	    String line = is.readLine();
	    System.out.println("received from server:" +line);
	    //关闭资源
	    pw.close();
	    is.close();
	    socket.close();
	}catch(Exception e){
	    e.printStackTrace();
	}
    }
}

														   

	    

     
	
	
	
